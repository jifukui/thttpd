thttp.c:thttp主程序
整个Thttpd程序的核心结构
函数：
static void handle_term( int sig )
static void handle_chld( int sig )
static void handle_hup( int sig )
static void handle_usr1( int sig )
static void handle_usr2( int sig )
static void handle_alrm( int sig )
static void re_open_logfile( void )
int main( int argc, char** argv )
static void parse_args( int argc, char** argv )
static void usage( void )
static void read_config( char* filename )
static void	value_required( char* name, char* value )
static void no_value_required( char* name, char* value )
static char* e_strdup( char* oldstr )
static void lookup_hostname( httpd_sockaddr* sa4P, size_t sa4_len, int* gotv4P, httpd_sockaddr* sa6P, size_t sa6_len, int* gotv6P )
static void read_throttlefile( char* tf )
static void shut_down( void )
static int handle_newconnect( struct timeval* tvP, int listen_fd )
static void handle_read( connecttab* c, struct timeval* tvP )
static void handle_send( connecttab* c, struct timeval* tvP )
static void handle_linger( connecttab* c, struct timeval* tvP )
static int check_throttles( connecttab* c )
static void clear_throttles( connecttab* c, struct timeval* tvP )
static void update_throttles( ClientData client_data, struct timeval* nowP )
static void finish_connection( connecttab* c, struct timeval* tvP )
static void clear_connection( connecttab* c, struct timeval* tvP )
static void really_clear_connection( connecttab* c, struct timeval* tvP )
static void idle( ClientData client_data, struct timeval* nowP )
static void wakeup_connection( ClientData client_data, struct timeval* nowP )
static void linger_clear_connection( ClientData client_data, struct timeval* nowP )
static void occasional( ClientData client_data, struct timeval* nowP )
static void show_stats( ClientData client_data, struct timeval* nowP )
static void logstats( struct timeval* nowP )
static void thttpd_logstats( long secs )



libthttpd.c：thttpd主要的控制程序
具体的细节的处理
static void check_options( void )
static void free_httpd_server( httpd_server* hs )
httpd_server* httpd_initialize(
    char* hostname, httpd_sockaddr* sa4P, httpd_sockaddr* sa6P,
    unsigned short port, char* cgi_pattern, int cgi_limit, char* charset,
    char* p3p, int max_age, char* cwd, int no_log, FILE* logfp,
    int no_symlink_check, int vhost, int global_passwd, char* url_pattern,
    char* local_pattern, int no_empty_referrers )
static int initialize_listen_socket( httpd_sockaddr* saP )
void httpd_set_logfp( httpd_server* hs, FILE* logfp )
void httpd_terminate( httpd_server* hs )
void httpd_unlisten( httpd_server* hs )
static void add_response( httpd_conn* hc, char* str )
void httpd_write_response( httpd_conn* hc )
void httpd_set_ndelay( int fd )
void httpd_clear_ndelay( int fd )
static void send_mime( httpd_conn* hc, int status, char* title, char* encodings, char* extraheads, char* type, off_t length, time_t mod )
void httpd_realloc_str( char** strP, size_t* maxsizeP, size_t size )
static void send_response( httpd_conn* hc, int status, char* title, char* extraheads, char* form, char* arg )
static void send_response_tail( httpd_conn* hc )
static void defang( char* str, char* dfstr, int dfsize )
void httpd_send_err( httpd_conn* hc, int status, char* title, char* extraheads, char* form, char* arg )
static int send_err_file( httpd_conn* hc, int status, char* title, char* extraheads, char* filename )
static void send_authenticate( httpd_conn* hc, char* realm )
static int b64_decode( const char* str, unsigned char* space, int size )
static int auth_check( httpd_conn* hc, char* dirname  )
static int auth_check2( httpd_conn* hc, char* dirname  )
static void send_dirredirect( httpd_conn* hc )
char* httpd_method_str( int method )
static int hexit( char c )
static void strdecode( char* to, char* from )
static void strencode( char* to, int tosize, char* from )
static int tilde_map_1( httpd_conn* hc )
static int tilde_map_2( httpd_conn* hc )
static int vhost_map( httpd_conn* hc )
static char* expand_symlinks( char* path, char** restP, int no_symlink_check, int tildemapped )
int httpd_get_conn( httpd_server* hs, int listen_fd, httpd_conn* hc )
int httpd_got_request( httpd_conn* hc )
int httpd_parse_request( httpd_conn* hc )
static char* bufgets( httpd_conn* hc )
static void de_dotdot( char* file )
void httpd_close_conn( httpd_conn* hc, struct timeval* nowP )
void httpd_destroy_conn( httpd_conn* hc )
static int ext_compare( const void* v1, const void* v2 )
static void init_mime( void )
static void figure_mime( httpd_conn* hc )
static void cgi_kill2( ClientData client_data, struct timeval* nowP )
static void cgi_kill( ClientData client_data, struct timeval* nowP )
static int name_compare( const void* v1, const void* v2 )
static int ls( httpd_conn* hc )
static char* build_env( char* fmt, char* arg )
static char* hostname_map( char* hostname )
static char** make_envp( httpd_conn* hc )
static char** make_argp( httpd_conn* hc )
static void cgi_interpose_input( httpd_conn* hc, int wfd )
static void post_post_garbage_hack( httpd_conn* hc )
static void cgi_interpose_output( httpd_conn* hc, int rfd )
static void cgi_child( httpd_conn* hc )
static int cgi( httpd_conn* hc )
static int really_start_request( httpd_conn* hc, struct timeval* nowP )
int httpd_start_request( httpd_conn* hc, struct timeval* nowP )
static void make_log_entry( httpd_conn* hc, struct timeval* nowP )
static int check_referrer( httpd_conn* hc )
static int really_check_referrer( httpd_conn* hc )
char* httpd_ntoa( httpd_sockaddr* saP )
static int sockaddr_check( httpd_sockaddr* saP )
static size_t sockaddr_len( httpd_sockaddr* saP )
static int my_snprintf( char* str, size_t size, const char* format, ... )
static long long atoll( const char* str )
int httpd_read_fully( int fd, void* buf, size_t nbytes )
int httpd_write_fully( int fd, const char* buf, size_t nbytes )
void httpd_logstats( long secs )





fdwatch.c
文件描述符的处理
int fdwatch_get_nfiles( void )
void fdwatch_add_fd( int fd, void* client_data, int rw )
void fdwatch_del_fd( int fd )
int fdwatch( long timeout_msecs )
int fdwatch_check_fd( int fd )
void* fdwatch_get_next_client_data( void )
void fdwatch_logstats( long secs )



match.c  
匹配相关
int match( const char* pattern, const char* string )
static int match_one( const char* pattern, int patternlen, const char* string )



mmc.c内存管理
内存数据的管理
void* mmc_map( char* filename, struct stat* sbP, struct timeval* nowP )
void mmc_unmap( void* addr, struct stat* sbP, struct timeval* nowP )
void mmc_cleanup( struct timeval* nowP )
static void panic( void )
static void really_unmap( Map** mm )
void mmc_term( void )
static int check_hash_size( void )
static int add_hash( Map* m )
static Map* find_hash( ino_t ino, dev_t dev, off_t size, time_t ct )
static unsigned int hash( ino_t ino, dev_t dev, off_t size, time_t ct )
void mmc_logstats( long secs )




strerror.c
char * strerror(errnum)




tdate_parse.c
static void pound_case( char* str )
static int strlong_compare( const void* v1, const void* v2 )
static int strlong_search( char* str, struct strlong* tab, int n, long* lP )
static int scan_wday( char* str_wday, long* tm_wdayP )
static int scan_mon( char* str_mon, long* tm_monP )
static int is_leap( int year )
static time_t tm_to_time( struct tm* tmP )
time_t tdate_parse( char* str )




日期相关处理
timers.c：计时器相关
static unsigned int hash( Timer* t )
static void l_add( Timer* t )
static void l_remove( Timer* t )
static void l_resort( Timer* t )
void tmr_init( void )
Timer* tmr_create(
    struct timeval* nowP, TimerProc* timer_proc, ClientData client_data,
    long msecs, int periodic )
struct timeval* tmr_timeout( struct timeval* nowP )
long tmr_mstimeout( struct timeval* nowP )
void tmr_run( struct timeval* nowP )
void tmr_reset( struct timeval* nowP, Timer* t )
void tmr_cancel( Timer* t )
void tmr_cleanup( void )
void tmr_term( void )
void tmr_logstats( long secs )




config.h  
配置
fdwatch.h  
libhttpd.h  
match.h  
mime_encodings.h  
mime_types.h  
mmc.h  
tdate_parse.h  
timers.h  
version.h






程序调用流程：
连接：
handle_newconnect